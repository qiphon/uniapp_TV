<template>
	<view :class="`touchWrapper ${showCover ? 'active' : ''}`" @tap="onWrapperTap">
		<template v-if="showCover">
			<list class="category">
				<cell class="touchItem" :key="item" :data-category="item" v-for="(item, indx) in categorys"
					@tap.stop="onTapCategory">
					<view class="inner">
						<text :class="`text ${item === checkedCategory ? 'active': ''}`">
							{{item}}
						</text>
					</view>
				</cell>
			</list>
			<list class="channel">
				<cell class="touchItem " :data-channel="item" v-for="(item, indx) in showChannels"
					@tap.stop="onTapChannel" v-if="checkedCategory" :key="item.name + item.url">
					<view class="inner">
						<text :class="`text ${item.url === showSource ? 'active': ''}`">
							{{item.name}}
						</text>
					</view>
				</cell>
			</list>
		</template>
	</view>
</template>

<script setup lang="ts">
	import { ref, watchPostEffect, computed, onMounted } from 'vue'
	import { LiveMsgKey, StorageKey } from '../../../utils/const';
	import { ChannelValue, LiveChannel, getLiveChannels } from '../../../utils/lives';

	const channels = ref<LiveChannel>()
	const showCover = ref(false)
	const checkedCategory = ref('')
	const currentCheckChannel = ref<ChannelValue>()
	const showSource = ref('')

	onMounted(() => {
		getLiveChannels().then(res => {
			channels.value = res
		})
	})

	const categorys = computed(() => Object.keys(channels.value))
	const showChannels = computed(() => checkedCategory.value && channels.value?.[checkedCategory.value])


	uni.$on(LiveMsgKey.showCover, () => {
		showCover.value = true
	})

	uni.$on(LiveMsgKey.hideCover, () => {
		showCover.value = false
	})

	const onWrapperTap = () => {
		showCover.value = !showCover.value
	}

	const onTapCategory = (ev) => {
		checkedCategory.value = ev.target.attr['data-category']
	}
	const onTapChannel = (ev) => {
		currentCheckChannel.value = ev.target.attr['data-channel']
		console.log(currentCheckChannel.value, 'currentCheckChannel')
		showSource.value = currentCheckChannel.value?.url
		uni.$emit(LiveMsgKey.changeChannel, { value: showSource.value })
	}
</script>

<style lang="less" scoped>
	.touchWrapper {
		padding-top: 80px;
		width: 750rpx;
		display: flex;
		flex: 1;
		flex-flow: row nowrap;
		transition: all ease .4s;


		&.active {
			background-color: rgba(0, 0, 0, .5);
		}

		.category,
		.channel {
			display: flex;
			flex: 1;
			max-width: 300px;

			.text.active {
				color: aqua;
			}
		}

		.touchItem {
			display: flex;
			flex-flow: column;
			border: 10px solid transparent;


			.inner {
				display: flex;
				// 不支持，目前看只能js 计算
				text-overflow: ellipsis;
				flex: 1;
				// width: 200px;
				border: 1px solid #fff;
				border-radius: 0 15px;
			}
		}


		.text {
			width: 200px;
			color: #fff;
			padding: 10rpx;
			font-size: 16px;
			// width: 100%;
		}
	}
</style>